// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repositories

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TypeSource string

const (
	TypeSourceTOPUP    TypeSource = "TOPUP"
	TypeSourcePAYMENT  TypeSource = "PAYMENT"
	TypeSourceTRANSFER TypeSource = "TRANSFER"
)

func (e *TypeSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeSource(s)
	case string:
		*e = TypeSource(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeSource: %T", src)
	}
	return nil
}

type NullTypeSource struct {
	TypeSource TypeSource `json:"type_source"`
	Valid      bool       `json:"valid"` // Valid is true if TypeSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeSource) Scan(value interface{}) error {
	if value == nil {
		ns.TypeSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeSource), nil
}

func (e TypeSource) Valid() bool {
	switch e {
	case TypeSourceTOPUP,
		TypeSourcePAYMENT,
		TypeSourceTRANSFER:
		return true
	}
	return false
}

func AllTypeSourceValues() []TypeSource {
	return []TypeSource{
		TypeSourceTOPUP,
		TypeSourcePAYMENT,
		TypeSourceTRANSFER,
	}
}

type TypeTransaction string

const (
	TypeTransactionCREDIT TypeTransaction = "CREDIT"
	TypeTransactionDEBIT  TypeTransaction = "DEBIT"
)

func (e *TypeTransaction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeTransaction(s)
	case string:
		*e = TypeTransaction(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeTransaction: %T", src)
	}
	return nil
}

type NullTypeTransaction struct {
	TypeTransaction TypeTransaction `json:"type_transaction"`
	Valid           bool            `json:"valid"` // Valid is true if TypeTransaction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeTransaction) Scan(value interface{}) error {
	if value == nil {
		ns.TypeTransaction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeTransaction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeTransaction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeTransaction), nil
}

func (e TypeTransaction) Valid() bool {
	switch e {
	case TypeTransactionCREDIT,
		TypeTransactionDEBIT:
		return true
	}
	return false
}

func AllTypeTransactionValues() []TypeTransaction {
	return []TypeTransaction{
		TypeTransactionCREDIT,
		TypeTransactionDEBIT,
	}
}

type Balance struct {
	BalanceID     pgtype.UUID        `db:"balance_id" json:"balance_id"`
	UserID        pgtype.UUID        `db:"user_id" json:"user_id"`
	BalanceAmount pgtype.Numeric     `db:"balance_amount" json:"balance_amount"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type BalancesHistory struct {
	BalanceHistoryID    pgtype.UUID        `db:"balance_history_id" json:"balance_history_id"`
	BalanceID           pgtype.UUID        `db:"balance_id" json:"balance_id"`
	TransactionID       pgtype.UUID        `db:"transaction_id" json:"transaction_id"`
	BalanceAmountBefore pgtype.Numeric     `db:"balance_amount_before" json:"balance_amount_before"`
	BalanceAmountAfter  pgtype.Numeric     `db:"balance_amount_after" json:"balance_amount_after"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Payment struct {
	PaymentID     pgtype.UUID        `db:"payment_id" json:"payment_id"`
	UserID        pgtype.UUID        `db:"user_id" json:"user_id"`
	Remarks       string             `db:"remarks" json:"remarks"`
	PaymentAmount pgtype.Numeric     `db:"payment_amount" json:"payment_amount"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Topup struct {
	TopUpID     pgtype.UUID        `db:"top_up_id" json:"top_up_id"`
	UserID      pgtype.UUID        `db:"user_id" json:"user_id"`
	TopUpAmount pgtype.Numeric     `db:"top_up_amount" json:"top_up_amount"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Transaction struct {
	TransactionID   pgtype.UUID        `db:"transaction_id" json:"transaction_id"`
	UserID          pgtype.UUID        `db:"user_id" json:"user_id"`
	Status          string             `db:"status" json:"status"`
	TransactionType TypeTransaction    `db:"transaction_type" json:"transaction_type"`
	SourceID        pgtype.UUID        `db:"source_id" json:"source_id"`
	SourceType      TypeSource         `db:"source_type" json:"source_type"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Transfer struct {
	TransferID     pgtype.UUID        `db:"transfer_id" json:"transfer_id"`
	SourceUserID   pgtype.UUID        `db:"source_user_id" json:"source_user_id"`
	TargetUserID   pgtype.UUID        `db:"target_user_id" json:"target_user_id"`
	Remarks        string             `db:"remarks" json:"remarks"`
	TransferAmount pgtype.Numeric     `db:"transfer_amount" json:"transfer_amount"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type User struct {
	UserID      pgtype.UUID        `db:"user_id" json:"user_id"`
	FirstName   string             `db:"first_name" json:"first_name"`
	LastName    pgtype.Text        `db:"last_name" json:"last_name"`
	PhoneNumber string             `db:"phone_number" json:"phone_number"`
	Address     string             `db:"address" json:"address"`
	Pin         string             `db:"pin" json:"pin"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
